@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Frontend.Filters
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Frontend.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<SignUp> Logger
@inject NavigationManager NavigationManager


<PageTitle>Sign up</PageTitle>



<section class="signUp">
    <div class="container">

        @if (!string.IsNullOrEmpty(ViewData["StatusMessage"]?.ToString()))
        {
            <div class="alert alert-danger">
                @ViewData["StatusMessage"]
            </div>
        }

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signup" novalidate>
            <DataAnnotationsValidator />
            <AntiforgeryToken />
            <h1>Create Account</h1>
            <p>Already have an account? <a href="/signin">Sign in here</a></p>


            <div class="form-content">
                

                
                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="givenname" aria-required="true" placeholder="Enter your first name" />
                    <ValidationMessage For="() => Input.FirstName" />
                </div>
                
                
                
                <div id="form-lastname" class="input-group">
                    <label>Last name</label>
                    <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="surname" aria-required="true" placeholder="Enter your last name" />
                    <ValidationMessage For="() => Input.LastName" />
                </div>

                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText type = "email" @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter your email" />
                    <ValidationMessage For="() => Input.Email" />
                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="password" aria-required="true" placeholder="Enter your password" />
                    <ValidationMessage For="() => Input.Password" />
                </div>
                <div id="form-confirmpassword" class="input-group">
                    <label asp-for="ConfirmPassword"></label>
                    <input asp-for="ConfirmPassword" />
                    <span asp-validation-for="ConfirmPassword"></span>
                </div>
                <div id="form-checkbox" class="checkbox-group">
                    <div class="input-group">
                        <input asp-for="TermsAndConditions" />
                        <label asp-for="TermsAndConditions"></label>
                    </div>
                    <span asp-validation-for="TermsAndConditions"></span>
                </div>
                <div id="form-button">
                    <button type="submit" class="btn btn-theme">Sign up</button>
                </div>
            </div>
        </EditForm>

    </div>
</section>




@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser { UserName = Input.Email, Email = Input.Email };

        //usermanager som ska skapa en användare, om den inte lyckas så gör den en return
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
            return;

        //om man måste en confirmationmail så gör vi en redirect:
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"confirm?email={user.Email}");
        }
        else
        {
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }

    }


    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        [RegularExpression(@"^[\w-\.]+@([\w-]+\.)+[\w-]{2,}$", ErrorMessage = "Incorrect email format.")]
        public string Email { get; set; } = "";

        [Required]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$", ErrorMessage = "Incorrect password format.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";


        [CheckboxRequired]
        [Display(Name = "I agree to the Terms & Conditions.", Prompt = "Terms and Conditions")]
        public bool TermsAndConditions { get; set; }
    }
}
